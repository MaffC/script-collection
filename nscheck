#!/usr/bin/env bash
#nscheck.sh - Simple script to do fairly good DNS diagnostics, to determine: Failing/slow nameservers, result inconsistency and so on.

#TODO
# - Handle multiple results for single record names (DNS round-robin)
# - Use getopt for better commandline arg parsing

#Configurables
TIMEOUT=1

#Binary locations
DIG_BIN="$(command -v dig)"
if [ $? -ne 0 -o -z "$DIG_BIN" ]; then
	echo "Error: 'dig' cannot be found. Please ensure you have the relevant package for 'dig' installed."
	exit 1
fi

#Functions
function usage () {
	echo "nscheck 0.1: Bash script to do DNS diagnosis.
NOTE: This script will not, at present, function properly for DNS queries which result in more than one record of the same type (ie, DNS round robins)

Usage: nscheck [-4|-6] DNS.ENTITY
nscheck -m: Show machine-parseable output (keypairs indicating nameserver responsiveness)
nscheck -h: Show this usage.
nscheck -4: Use IPv4 [Default].
nscheck -6: Use IPv6."
}

#Internal variables
DIG_RECORD_TYPE="A"
HUMAN_READABLE=1
ZONE=""
if [ "$1" == "-6" ]; then
	DIG_RECORD_TYPE="AAAA"
	ZONE=$2
elif [ "$1" == "-4" ]; then
	ZONE=$2
elif [ "$1" == "-h" ]; then
	usage
	exit 0
elif [ "$1" == "-m" ]; then
	HUMAN_READABLE=0
	ZONE=$2
else
	ZONE=$1
fi
if [ -z "$ZONE" ]; then
	usage
	exit 1
fi
DOMAIN=$ZONE
MACHINE_SEPARATOR=";"
IPS_REPORTED=""
NS_REPORTED=""
FAILED_NS=""
IPS_CHECKED=""
SUCCESS_OUT="NS | NS-IP | NS-REVERSE | IP | REVERSE"
FAIL_OUT="NS | NS-IP | NS-REVERSE"
MACHINE_OUT=""

#Because this is a DNS debugging script, we don't rely on a domain's nameservers themselves for a list of nameservers. Instead, we query root and TLD nameservers.
#We could in future use WHOIS data to get nameservers.

#First we make sure we're querying the nameservers for the actual domain and not a subdomain. Also; remove trailing dot.
OUT=$($DIG_BIN $ZONE SOA|grep "^;; AUTH" -A1|tail -n1|awk '{print $1}'|sed -e 's/.$//g')
if [ -z "$OUT" ]; then
	#Try again.
	OUT=$($DIG_BIN $ZONE SOA|grep "^;; ANSWER" -A6|grep "SOA"|tail -n1|awk '{print $1}'|sed -e 's/.$//g')
fi
if [[ $OUT != $ZONE && ! -z "$OUT" ]]; then
	ZONE=$OUT
fi
for ns in $($DIG_BIN +short $ZONE NS); do
	if [[ $NS_REPORTED != *"$ns"* ]]; then
		NS_REPORTED="$NS_REPORTED$ns "
	fi
	for ip in $($DIG_BIN +short $ns); do
		if [[ $IPS_CHECKED != *"$ip"* ]]; then
			IPS_CHECKED="$IPS_CHECKED $ip"
			#We need to use tail here in order to stop dig from being fucking retarded and providing a cname as well as the result
			OUT="$($DIG_BIN +short +time=$TIMEOUT @$ip $DOMAIN $DIG_RECORD_TYPE|tail -n1)"
			REVERSE=$($DIG_BIN +short -x $ip|tail -n1)
			if [ -z "$REVERSE" ]; then
				REVERSE="no-reverse"
			fi
			if [[ $OUT == ";;"* && $FAILED_NS != *"$ip"* ]]; then
				FAILED_NS="$FAILED_NS$ip "
			elif [[ $OUT != ";;"* && $IPS_REPORTED != *"$OUT"* ]]; then
				IPS_REPORTED="$IPS_REPORTED$OUT "
			fi
			if [[ $OUT != ";;"* ]]; then
				REVOUT=""
				if [ -z "$OUT" ]; then
					OUT="no-record"
				else
					REVOUT="$($DIG_BIN +short -x $OUT|tail -n1)"
				fi
				if [ -z "$REVOUT" ]; then
					REVOUT="no-reverse"
				fi
				SUCCESS_OUT="$SUCCESS_OUT
$ns | $ip | $REVERSE | $OUT | $REVOUT"
				MACHINE_OUT="$MACHINE_OUT$ip${MACHINE_SEPARATOR}1
"
			else
				FAIL_OUT="$FAIL_OUT
$ns | $ip | $REVERSE"
				MACHINE_OUT="$MACHINE_OUT$ip${MACHINE_SEPARATOR}0
"
			fi
		fi
	done
done
if [ $HUMAN_READABLE -eq 0 ]; then
	echo -n "$MACHINE_OUT"|sort -n
	exit
fi
if [[ $ZONE != $DOMAIN ]]; then
	echo "Found root zone for $DOMAIN: $ZONE"
fi
if [ ! -z "$NS_REPORTED" ]; then
	echo "Nameserver records found for $ZONE: $(echo $NS_REPORTED|sort)"
else
	echo "No nameserver records were found for $ZONE."
	exit 1
fi
if [ -z "$IPS_REPORTED" ]; then
	echo "No IP addresses were returned for $DOMAIN"
else
	echo "IPs reported for $DOMAIN: $(echo $IPS_REPORTED|sort -n)"
fi
if [ -z "$FAILED_NS" ]; then
	echo "No nameservers for $DOMAIN failed to respond."
else
	echo "The following nameservers for $DOMAIN failed to respond: $(echo $FAILED_NS|sort -n)"
fi
if [ ! -z "$IPS_REPORTED" ]; then
	echo
	echo "Full DNS output of each nameserver IP:"
	echo "$SUCCESS_OUT"|sort -n|uniq|column -t
fi
if [ ! -z "$FAILED_NS" ]; then
	echo
	echo "Reverse DNS for every unresponsive nameserver IP:"
	echo "$FAIL_OUT"|sort -n|uniq|column -t
fi
echo
